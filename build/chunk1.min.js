const frag_functions_default="\n  #define PI 3.141592653589793\n  #define TAU 6.283185307179586\n\t\n\tfloat rand(vec2 c){\n\t\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n\t}\n\n\tmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n\t}\n\n\tmat2 scale2d(vec2 _scale){\n\t\t\treturn mat2(_scale.x,0.0,\n\t\t\t\t\t\t\t\t\t0.0,_scale.y);\n\t}\n\n\tvec2 tile (vec2 _st, float _zoom) {\n\t\t\t_st *= _zoom;\n\t\t\treturn fract(_st);\n\t}\n\n\t//\tClassic Perlin 3D Noise \n\t//\tby Stefan Gustavson\n\n\tvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n\tvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\tvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\n\tfloat cnoise(vec3 P){\n\t\tvec3 Pi0 = floor(P); // Integer part for indexing\n\t\tvec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n\t\tPi0 = mod(Pi0, 289.0);\n\t\tPi1 = mod(Pi1, 289.0);\n\t\tvec3 Pf0 = fract(P); // Fractional part for interpolation\n\t\tvec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n\t\tvec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n\t\tvec4 iy = vec4(Pi0.yy, Pi1.yy);\n\t\tvec4 iz0 = Pi0.zzzz;\n\t\tvec4 iz1 = Pi1.zzzz;\n\n\t\tvec4 ixy = permute(permute(ix) + iy);\n\t\tvec4 ixy0 = permute(ixy + iz0);\n\t\tvec4 ixy1 = permute(ixy + iz1);\n\n\t\tvec4 gx0 = ixy0 / 7.0;\n\t\tvec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n\t\tgx0 = fract(gx0);\n\t\tvec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n\t\tvec4 sz0 = step(gz0, vec4(0.0));\n\t\tgx0 -= sz0 * (step(0.0, gx0) - 0.5);\n\t\tgy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n\t\tvec4 gx1 = ixy1 / 7.0;\n\t\tvec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n\t\tgx1 = fract(gx1);\n\t\tvec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n\t\tvec4 sz1 = step(gz1, vec4(0.0));\n\t\tgx1 -= sz1 * (step(0.0, gx1) - 0.5);\n\t\tgy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n\t\tvec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n\t\tvec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n\t\tvec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n\t\tvec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n\t\tvec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n\t\tvec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n\t\tvec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n\t\tvec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n\t\tvec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n\t\tg000 *= norm0.x;\n\t\tg010 *= norm0.y;\n\t\tg100 *= norm0.z;\n\t\tg110 *= norm0.w;\n\t\tvec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n\t\tg001 *= norm1.x;\n\t\tg011 *= norm1.y;\n\t\tg101 *= norm1.z;\n\t\tg111 *= norm1.w;\n\n\t\tfloat n000 = dot(g000, Pf0);\n\t\tfloat n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n\t\tfloat n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n\t\tfloat n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n\t\tfloat n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n\t\tfloat n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n\t\tfloat n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n\t\tfloat n111 = dot(g111, Pf1);\n\n\t\tvec3 fade_xyz = fade(Pf0);\n\t\tvec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n\t\tvec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n\t\tfloat n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n\t\treturn 2.2 * n_xyz;\n\t}\n\t\n\t\nfloat noise(vec2 p, float freq ){\n\tfloat unit = 1./freq;\n\tvec2 ij = floor(p/unit);\n\tvec2 xy = mod(p,unit)/unit;\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\txy = .5*(1.-cos(PI*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\n\t\n\tfloat pNoise(vec2 p, int res){\n\t\t// p+=u_noise_pan;\n\t\tfloat persistance = .5;\n\t\tfloat n = 0.;\n\t\tfloat normK = 0.;\n\t\tfloat f = 4.;\n\t\tfloat amp = 1.;\n\t\tint iCount = 0;\n\t\t//noprotect\n\t\tfor (int i = 0; i<50; i++){\n\t\t\tn+=amp*noise(p, f);\n\t\t\tf*=2.;\n\t\t\tnormK+=amp;\n\t\t\tamp*=persistance;\n\t\t\tif (iCount == res) break;\n\t\t\tiCount++;\n\t\t}\n\t\tfloat nf = n/normK;\n\t\treturn nf*nf*nf*nf;\n\t}\n\n\tvec2 random2( vec2 p ) {\n\t\t\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n\t}\n\n",vert=`\n\tprecision highp float;\n\n    // attributes, in\n    attribute vec3 aPosition;\n    attribute vec3 aNormal;\n    attribute vec2 aTexCoord;\n\n    // attributes, out\n    varying vec3 var_vertPos;\n    varying vec3 var_vertNormal;\n    varying vec2 var_vertTexCoord;\n\t\tvarying vec4 var_centerGlPosition;//原点\n    \n    // matrices\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n    uniform mat3 uNormalMatrix;\n\tuniform float u_time;\n\tuniform sampler2D u_tex;\n\n\t${frag_functions_default}\n\n    void main() {\n      vec3 pos = aPosition;\n\t\t\t\n\t\t\t\n\t\t\t// vec4 texColor = texture2D(u_tex,aTexCoord);\n\t\t\t// pos.x += (texColor.r-0.5)/4.;\n\t\t\t// pos.y += (texColor.g-0.5)/4.;\n\t\t\t// pos.z += (texColor.b-0.5)/4.;\n\t\t\t\n\t\t\tvec4 posOut = uProjectionMatrix * uModelViewMatrix * vec4(pos, 1.0);\n\t\t\t\n\t\t\t\n\t\t\t\n      gl_Position = posOut;\n\n      // set out value\n      var_vertPos      = pos;\n      var_vertNormal   =  aNormal;\n      var_vertTexCoord = aTexCoord;\n\t\t\tvar_centerGlPosition = uProjectionMatrix * uModelViewMatrix * vec4(0., 0., 0.,1.0);\n    }\n`,frag=`\n\tprecision highp float;\n\n\tuniform vec2 u_resolution;\n\tuniform vec2 u_mouse;\n\tuniform float u_time;\n\tuniform vec3 u_lightDir;\n\tuniform vec3 u_col;\n\tuniform vec3 u_bgColor;\n\tuniform mat3 uNormalMatrix;\n\tuniform float u_pixelDensity;\n\tuniform sampler2D u_tex;\n\tuniform sampler2D u_canvas_tex; \n\tuniform float u_distortFactor;\n\tuniform bool u_hasBorder;\n\n\t//attributes, in\n\tvarying vec4 var_centerGlPosition;\n\tvarying vec3 var_vertNormal;\n\tvarying vec2 var_vertTexCoord;\n\n\t${frag_functions_default}\n\n\tvoid main(){\n\t\tvec2 st = var_vertTexCoord.xy /u_resolution.xy*u_resolution.y;\n\t\tvec2 originalSt = st;\n\t\tst.x*=u_resolution.x/u_resolution.y;\n\t\tvec2 stBorder =st;\n\n\t\t// st.x+=pNoise(st*20.,5)*pNoise(st*10.+2.,10)/20.;\n\t\t// st.y += pNoise(st * 20., 5) * pNoise(st * 10. + 2., 10) / 20.;\n\t\t \n \n\t\n\t\tvec3 canvasOffset = texture2D(u_canvas_tex,st).rgb;\n\t\tst.x+=0.35/255.- canvasOffset.r/255.*3. ;\n\t\tst.y+=0.35/255.- canvasOffset.g/255.*3.  ;\n\t\t\n\t\tfloat distortFactor = u_distortFactor;\n\t\tst.x+=  cnoise(vec3(st*2.,${(1e3*random()).toFixed(4)}))/(30.)*distortFactor  ;\n\t\tst.y+= cnoise(vec3(st*20.,${(1e3*random()).toFixed(4)}))/(30.)*distortFactor \n\t\t\t\t\t+ cnoise(vec3(st/2.,${(1e3*random()).toFixed(4)}))/(100.)*distortFactor;\n\t\t\n\t\tvec4 texColor0 = texture2D(u_tex,st);\n\n\n\t\t\n\t\t//offset color Blocks\n\t\tfloat offsetColor = 1./300.;\n\t\tstBorder.x-= texColor0.r*offsetColor;\n\t\tstBorder.y-=texColor0.g*offsetColor+ texColor0.b*offsetColor;\n\t\t\n\t\tvec4 texColor1 = texture2D(u_tex,st);\n\n\t\t\n\t\tvec2 st2 = st;\n\t\t//brush feeling  \n\t\tfloat brushFactor = 500.;\n\t\tst2.x+=cnoise(vec3(st*1000.,100.))/brushFactor;\n\t\tst2.y+=cnoise(vec3(st*1000.,1000.))/brushFactor; \n \n\t\tvec4 texColor2 = texture2D(u_tex,st2);\n\t\tvec2 st3 = st;\n\t\tst3.x += pNoise(st * 500., 10) / 2.;\n\t\tst3.y += pNoise(st * 500., 10) / 2.;\n\t\tvec4 texColor3 = texture2D(u_tex, st3);\n\n\t\ttexColor2 = (texColor2*1. + texColor3*1.)/1.2;\n\t\t\n\t\tfloat d = distance(vec2(0.5) ,st);  \n\t\t// texColor*=1.-d+0.3;\n\t\t// gl_FragColor= vec4(color,1.0)+texColor2; \n\t\t\n\t\tfloat borderWidth = 24.;\n\t\tbool isBorder = stBorder.x*u_resolution.x<borderWidth\n\t\t|| (1.-stBorder.x)*u_resolution.x<borderWidth \n\t\t|| stBorder.y*u_resolution.y<borderWidth \n\t\t|| (1.-stBorder.y)*u_resolution.y<borderWidth;\n\t\t// isBorder=false;\n\t\tif (!u_hasBorder){\n\t\t\tisBorder=false;\n\t\t}\n\t\tfloat fade = 1.-distance(st,vec2(0.5))/5.;\n\t\t\n\t\tfloat modLen = 0.01;\n\t\tvec2 modSt = mod(st, vec2(modLen, modLen));\n\t\tvec2 stStroke = st - modSt;\n\t\t\n\t\tvec4 texColor4 = texture2D(u_tex,stStroke);\n\t\tif (abs(modSt.x - modSt.y) > modLen/3.) {\n\t\t\ttexColor4 = vec4(255.);\n\t\t}\n\n\t\tvec4 result ;\n\t\tresult = texColor1 * 0.8 + (texColor1 * texColor2 / 1.9 + texColor1 / 4. + texColor2 / 4.) / 5. ;\n\t\t// result = texColor4;\n\t\t// result.r*=fade;\n\t\t// result.g *= fade;\n\t\t// result.b *= fade;\n\t\tif ( isBorder){\n\t\t\tresult.rgb= vec3(u_bgColor);\n\t\t} else {\n\n\t\t\t// if ( distance(result.rgb, u_bgColor.rgb)<0.01 ){\n\t\t\t// \tresult.a=0.;\n\t\t\t// }\n\t\t} \n\t\tgl_FragColor =result;\t\n\t}\n`,frag_texture=` \n\tprecision highp float;\n\n\tuniform vec2 u_resolution;\n\tuniform vec2 u_mouse;\n\tuniform float u_time;\n\tuniform vec3 u_lightDir;\n\tuniform vec3 u_col;\n\tuniform mat3 uNormalMatrix;\n\tuniform float u_pixelDensity;\n\tuniform sampler2D u_tex; \n\n\t//attributes, in\n\tvarying vec4 var_centerGlPosition;\n\tvarying vec3 var_vertNormal;\n\tvarying vec2 var_vertTexCoord; \n\n\t${frag_functions_default}\n\n\tvoid main(){\n\t\tvec2 st = var_vertTexCoord.xy /u_resolution.xy*min(u_resolution.x,u_resolution.y);\n\t\tst.x*=u_resolution.x/u_resolution.y;\n\t\t\tst.x*=u_resolution.x/u_resolution.y;\n\t\t\tfloat sc = 1.*u_resolution.x/100.;\n\t\t\tst*=sc;\n\t\t\tst*=vec2(4.,1.);\n\t\t\n\t\t\t// st.y = 1.0 - st.y;\n\t\t\tvec3 color = vec3(0.);\n\t\t\tcolor+=cnoise(vec3(st*20.,10.))/7./2.;\n\t\t\tcolor+=cnoise(vec3(st*30.,10.))/9./2.;\n\t\t\tcolor+=cnoise(vec3(st*10.,10.))/9./2.;\n\t\t\n\t\t\tcolor+=cnoise(vec3(st*200.,10.))/9.;\n\t\t\tcolor+=cnoise(vec3(st*300.,10.))/11.;\n\t\t\tcolor+=cnoise(vec3(st*100.,10.))/11.;\n\t\t\n\t\t\tcolor+=cnoise(vec3(st*200.,10.))/9.;\n\t\t\tcolor+=cnoise(vec3(st*300.,10.))/11.;\n\t\t\tcolor+=cnoise(vec3(st*100.,10.))/11.;\n\t\t\tcolor+=pNoise(st*10.,5)*pNoise(st*10.+2.,10)/3.;\n\t\t\tcolor+=pNoise(st*30.,5)*pNoise(st*40.+2.,10)/3.; \n\t\t\tcolor/=2.;\n\t\t\n\t\t\tcolor = 1.-color;\n\t\t\tcolor*=vec3(1.,1.,0.96);\n\t\t\n\t\t// vec3 color = vec3(st.x,st.y,1.);\n\t\tgl_FragColor= vec4(color,1.0);\n\t}\n`;

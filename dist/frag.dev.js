"use strict";

var frag = "\n\tprecision highp float;\n\n\tuniform vec2 u_resolution;\n\tuniform vec2 u_mouse;\n\tuniform float u_time;\n\tuniform vec3 u_lightDir;\n\tuniform vec3 u_col;\n\tuniform vec3 u_bgColor;\n\tuniform mat3 uNormalMatrix;\n\tuniform float u_pixelDensity;\n\tuniform sampler2D u_tex;\n\tuniform sampler2D u_canvas_tex; \n\n\t//attributes, in\n\tvarying vec4 var_centerGlPosition;\n\tvarying vec3 var_vertNormal;\n\tvarying vec2 var_vertTexCoord;\n\n\t".concat(frag_functions_default, "\n\n\tvoid main(){\n\t\tvec2 st = var_vertTexCoord.xy /u_resolution.xy*u_resolution.y;\n\t\tst.x*=u_resolution.x/u_resolution.y;\n\t\tvec2 stBorder =st;\n\t\t\n\t\tstBorder.x+=cnoise(vec3(st*1000.,100.))/500.;\n\t\tstBorder.y+=cnoise(vec3(st*1000.,1000.))/500.; \n\t\t\n\t\tstBorder.x+=cnoise(vec3(st*100.,100.))/500.;\n\t\tstBorder.y+=cnoise(vec3(st*100.,1000.))/500.; \n\n\n\n\t\n\t\tvec3 canvasOffset = texture2D(u_canvas_tex,st* vec2(u_resolution.x/u_resolution.y,1.)).rgb;\n\t\tst.x+=0.35/255.- canvasOffset.r/255.*3. ;\n\t\tst.y+=0.35/255.- canvasOffset.g/255.*3.  ;\n\t\t\n\t\tfloat distortFactor =  0.8;\n\t\tst.x+=  cnoise(vec3(st*2.,").concat((Math.random() * 1000).toFixed(4), "))/(30.)*distortFactor  ;\n\t\tst.y+= cnoise(vec3(st*20.,").concat((Math.random() * 1000).toFixed(4), "))/(30.)*distortFactor \n\t\t\t\t\t+ cnoise(vec3(st/2.,").concat((Math.random() * 1000).toFixed(4), "))/(100.)*distortFactor;\n\t\t\n\t\t// st.x+=cnoise(vec3(st*50.,100.))/300.  ;\n\t\t// st.y+=cnoise(vec3(st*100.,1000.))/300.;\n\t\t\n\t\tvec4 texColor0 = texture2D(u_tex,st);\n\t\t\n\t\t//offset color Blocks\n\t\tfloat offsetColor = 1./300.;\n\t\tstBorder.x-= texColor0.r*offsetColor;\n\t\tstBorder.y-=texColor0.g*offsetColor+ texColor0.b*offsetColor;\n\t\t\n\t\tvec4 texColor1 = texture2D(u_tex,st);\n\t\t \n\t\t\n\t\tvec2 st2 = st;\n\t\t//brush feeling  \n\t\tfloat brushFactor = 400.;\n\t\tst2.x+=cnoise(vec3(st*1000.,100.))/brushFactor;\n\t\tst2.y+=cnoise(vec3(st*1000.,1000.))/brushFactor; \n \n\t\tvec4 texColor2 = texture2D(u_tex,st2);\n\t\t\n\t\tfloat d = distance(vec2(0.5) ,st);  \n\t\t// texColor*=1.-d+0.3;\n\t\t// gl_FragColor= vec4(color,1.0)+texColor2; \n\t\t\n\t\tfloat borderWidth = 20.;\n\t\tbool isBorder = stBorder.x*u_resolution.x<borderWidth\n\t\t|| (1.-stBorder.x)*u_resolution.x<borderWidth \n\t\t|| stBorder.y*u_resolution.y<borderWidth \n\t\t|| (1.-stBorder.y)*u_resolution.y<borderWidth;\n\t\t\n\t\tvec4 result ;\n\t\tresult = texColor1*0.8 + (texColor1*texColor2/1.9+texColor1/4.+texColor2/4.)/5.;\n\t\tif ( isBorder){\n\t\t\tresult.rgb= vec3(u_bgColor);\n\t\t} else {\n\n\t\t\t// if ( distance(result.rgb, u_bgColor.rgb)<0.01 ){\n\t\t\t// \tresult.a=0.;\n\t\t\t// }\n\t\t} \n\t\tgl_FragColor =result;\t\n\t}\n");